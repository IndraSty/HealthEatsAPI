generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model diseases {
  id_disease      Int               @id
  name            String?           @db.VarChar(100)
  description     String?           @db.Text
  details_disease details_disease[]
}

model foods {
  id_food         Int               @id @default(autoincrement())
  food_name       String            @db.VarChar(100)
  ingredients     String?           @db.Text
  steps           String?           @db.Text
  image           String?           @db.VarChar(200)
  khasiat         String?           @db.Text
  deskripsi       String?           @db.Text
  type            String?           @db.VarChar(100)
  details_disease details_disease[]
  favorite        favorite[]
}

model recommendations {
  id_recommendation      Int                      @id @default(autoincrement())
  id_user                Int
  time                   DateTime                 @default(now())
  detail_recommendations detail_recommendations[]
  users                  users                    @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "recommendations_ibfk_1")

  @@index([id_user], map: "id_user")
}

model users {
  id_user         Int               @id @default(autoincrement())
  name            String            @db.VarChar(200)
  email           String            @db.VarChar(200)
  password        String            @db.VarChar(100)
  born            DateTime?         @db.Date
  phone           Int?
  image           String?           @db.VarChar(200)
  refreshToken    String?           @db.VarChar(300)
  updated_at      DateTime          @default(now()) @updatedAt
  created_at      DateTime          @default(now())
  favorite        favorite[]
  recommendations recommendations[]
}

model details_disease {
  id_details             Int                      @id @default(autoincrement())
  id_disease             Int
  id_food                Int
  detail_recommendations detail_recommendations[]
  diseases               diseases                 @relation(fields: [id_disease], references: [id_disease])
  foods                  foods                    @relation(fields: [id_food], references: [id_food])

  @@index([id_disease], map: "details_disease_id_disease_fkey")
  @@index([id_food], map: "details_disease_id_food_fkey")
}

model detail_recommendations {
  id                Int             @id @default(autoincrement())
  id_details        Int
  id_recommendation Int
  details_disease   details_disease @relation(fields: [id_details], references: [id_details])
  recommendations   recommendations @relation(fields: [id_recommendation], references: [id_recommendation])

  @@index([id_details], map: "detail_recommendations_id_details_fkey")
  @@index([id_recommendation], map: "detail_recommendations_id_recommendation_fkey")
}

model favorite {
  id         Int     @id @default(autoincrement())
  id_food    Int
  id_user    Int
  isFavorite Boolean @default(false)
  foods      foods   @relation(fields: [id_food], references: [id_food])
  users      users   @relation(fields: [id_user], references: [id_user])

  @@index([id_food], map: "favorite_id_food_fkey")
  @@index([id_user], map: "favorite_id_user_fkey")
}
